<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://code-devotee.github.io/atom.xml" rel="self"/>
  
  <link href="https://code-devotee.github.io/"/>
  <updated>2022-05-24T06:58:20.160Z</updated>
  <id>https://code-devotee.github.io/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分法</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-05-24T06:58:20.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法</p><span id="more"></span><h3 id="整数二分法模板"><a href="#整数二分法模板" class="headerlink" title="整数二分法模板"></a>整数二分法模板</h3><p>求最小**的最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p2440</p></blockquote><p>求最大**的最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123; </span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p1182</p></blockquote><h3 id="浮点数的二分法"><a href="#浮点数的二分法" class="headerlink" title="浮点数的二分法"></a>浮点数的二分法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left - right &gt; x)&#123;</span><br><span class="line">    <span class="type">double</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">        left = mid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;p&gt;使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="https://code-devotee.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>差分与前缀和</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-04-11T09:21:44.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差分与前缀和"><a href="#差分与前缀和" class="headerlink" title="差分与前缀和"></a>差分与前缀和</h1><h3 id="1-差分"><a href="#1-差分" class="headerlink" title="1.差分"></a>1.差分</h3><p>差分的公式：d[i] = a[i] - a[i-1];</p><p>当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变</p><span id="more"></span><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组: 1 3 7 8 2 10</span><br><span class="line">差分: 1 2 4 1 -6 8</span><br><span class="line"></span><br><span class="line">第2个数到第4个数每个数增加1</span><br><span class="line"></span><br><span class="line">数组: 1 4 8 9 2 10</span><br><span class="line">差分: 1 3 4 1 -7 8</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">d[<span class="number">5</span>] -= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-前缀和"><a href="#2-前缀和" class="headerlink" title="2.前缀和"></a>2.前缀和</h3><p>递推公式：S[i] = S[i - 1] + a[i];</p><p>求第 j 项到第 k 项：S[k] - S[j ]</p><h4 id="1-在一个坐标系里，求一个边长为-a-的正方形的和"><a href="#1-在一个坐标系里，求一个边长为-a-的正方形的和" class="headerlink" title="1.在一个坐标系里，求一个边长为 a 的正方形的和"></a>1.在一个坐标系里，求一个边长为 a 的正方形的和</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[100][100];</span><br><span class="line">int arr2[100][100];</span><br><span class="line">int sum;</span><br></pre></td></tr></table></figure><ul><li>先求出坐标系内任意一点的前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        cin &gt;&gt; arr[i][j];</span><br><span class="line">        arr2[i][j] = arr2[i][j - <span class="number">1</span>] + arr2[i - <span class="number">1</span>][j] - arr2[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求变长为 a 的正方形的和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = a + <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = a + <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        sum = arr2[i][j] - arr2[i - a][j] - arr2[i][j - a] + arr2[i - a][j - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-求一点经过线段的次数"><a href="#2-求一点经过线段的次数" class="headerlink" title="2.求一点经过线段的次数"></a>2.求一点经过线段的次数</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一点从 3 到 1 再到 4</span><br><span class="line"></span><br><span class="line">1-22-33-4</span><br><span class="line">221</span><br></pre></td></tr></table></figure><p>解决方法：开头+1，结尾-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="built_in">min</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">max</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    cnt[left]++;</span><br><span class="line">    cnt[right]--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再利用前缀和求出每一段的次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">    cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-求一段由01组成的且01数量相等的最长子序列"><a href="#3-求一段由01组成的且01数量相等的最长子序列" class="headerlink" title="3.求一段由01组成的且01数量相等的最长子序列"></a>3.求一段由01组成的且01数量相等的最长子序列</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 0 0 1 1 0 0</span><br></pre></td></tr></table></figure><ul><li>若为0，则减1，若为1，则加1 ，求出前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每次更新比此前记录 ans 还要大的值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span> + ans;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] - arr[i - <span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;差分与前缀和&quot;&gt;&lt;a href=&quot;#差分与前缀和&quot; class=&quot;headerlink&quot; title=&quot;差分与前缀和&quot;&gt;&lt;/a&gt;差分与前缀和&lt;/h1&gt;&lt;h3 id=&quot;1-差分&quot;&gt;&lt;a href=&quot;#1-差分&quot; class=&quot;headerlink&quot; title=&quot;1.差分&quot;&gt;&lt;/a&gt;1.差分&lt;/h3&gt;&lt;p&gt;差分的公式：d[i] = a[i] - a[i-1];&lt;/p&gt;
&lt;p&gt;当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分与前缀和" scheme="https://code-devotee.github.io/tags/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——背包问题</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-06-22T06:42:57.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划——背包问题"><a href="#动态规划——背包问题" class="headerlink" title="动态规划——背包问题"></a>动态规划——背包问题</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p>物品数量有限，要么选择该物品，要么不选这个物品</p><ol><li>朴素做法（开二维空间）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line">arr[i][j] = arr[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i]) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>从二维优化到一维（空间优化）</li></ol><p>因为f[i]只用到了arr[i-1]，而没有用到arr[i-2]…arr[0]，所以可以直接用一维数组。</p><p>如果直接删掉，则：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v[i];j &lt;= m;j++) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[j - v[i]] 是第 i 层的，解决方案为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>物品有无限个</p><ol><li>朴素做法（暴力dp)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>;k*v[i] &lt;= j;k++) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>优化状态转移方程，时间复杂度为O(n2)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[i][j] = max(arr[i-1][j],arr[i-1][j-v]+w,arr[i-1][j-2v]+2w,...)</span><br><span class="line">arr[i][j-v] = max(          arr[i-1][j-v],  arr[i-1][j-2v]+w,...)</span><br><span class="line">即：</span><br><span class="line">arr[i][j] = max(arr[i-1][j],arr[i][j-v]);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line">arr[i][j] = arr[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i]) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i][j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用一维数组</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v[i];j &lt;= m;j++) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>不能用完全背包来优化多重背包</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i<span class="number">-1</span>][j], f[i<span class="number">-1</span>][j-v]+w, f[i<span class="number">-1</span>][j<span class="number">-2</span>v]+<span class="number">2</span>w, f[i<span class="number">-1</span>][j<span class="number">-3</span>v]+<span class="number">3</span>w,.., f[i<span class="number">-1</span>][j-kv]+kw)</span><br><span class="line">f[i][j-v] = <span class="built_in">max</span>(         f[i<span class="number">-1</span>][j-v],   f[i<span class="number">-1</span>][j<span class="number">-2</span>v]+w,  f[i<span class="number">-1</span>][j<span class="number">-3</span>v]+<span class="number">2</span>w,.., f[i<span class="number">-1</span>][j-kv]+(k<span class="number">-1</span>)w)</span><br><span class="line"><span class="comment">// 个数无限，只受背包容积j限制，而每次都是同步的 k 个 v[i]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重背包</span></span><br><span class="line">f[i,j] = <span class="built_in">max</span>(f[i<span class="number">-1</span>,j], f[i<span class="number">-1</span>,j-v]+w, f[i<span class="number">-1</span>,j<span class="number">-2</span>v]+<span class="number">2</span>w,.., f[i<span class="number">-1</span>,j-sv] + sw ) </span><br><span class="line">f[i,j-v] = <span class="built_in">max</span>(        f[i<span class="number">-1</span>,j-v],   f[i<span class="number">-1</span>,j<span class="number">-2</span>v]+w,.., f[i<span class="number">-1</span>,j-sv]+(s<span class="number">-1</span>)w, f[i<span class="number">-1</span>,j-(s+<span class="number">1</span>)v]+sw )</span><br><span class="line"><span class="comment">// 受个数限制，永远最后多一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多重背包的正确优化（二进制拆分法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[<span class="number">12010</span>], w[<span class="number">12010</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="type">int</span> a, b, s;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= s) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">v[cnt] = a * k;</span><br><span class="line">w[cnt] = b * k;</span><br><span class="line">s -= k;</span><br><span class="line">k *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">v[cnt] = a * s;</span><br><span class="line">w[cnt] = b * s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n = cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">110</span>], v[<span class="number">110</span>][<span class="number">110</span>], w[<span class="number">110</span>][<span class="number">110</span>], s[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= s[i];j++) &#123;</span><br><span class="line">cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= <span class="number">0</span>;j--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= s[i];k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][k] &lt;= j) &#123;</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;动态规划——背包问题&quot;&gt;&lt;a href=&quot;#动态规划——背包问题&quot; class=&quot;headerlink&quot; title=&quot;动态规划——背包问题&quot;&gt;&lt;/a&gt;动态规划——背包问题&lt;/h2&gt;&lt;h3 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="背包问题" scheme="https://code-devotee.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>用户注册</title>
    <link href="https://code-devotee.github.io/2022/03/23/%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>https://code-devotee.github.io/2022/03/23/%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-22T14:22:34.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="1-连接数据库的配置"><a href="#1-连接数据库的配置" class="headerlink" title="1.连接数据库的配置"></a>1.连接数据库的配置</h3><span id="more"></span><p>在 application.properties 文件下配置如下信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">#rjh623824asdf</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:Mapper/*.xml</span></span><br></pre></td></tr></table></figure><blockquote><p>mybatis.mapper-locations 的作用是扫描当前根目录下的Mapper文件的所有xml文件</p></blockquote><h3 id="2-创建实体层"><a href="#2-创建实体层" class="headerlink" title="2.创建实体层"></a>2.创建实体层</h3><p>根据数据库的数据类型和数据名称创建实体层，由于实体层的每个实体都有日志的4个信息，所以可以将这4个数据单独作为父类，从而提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser; <span class="comment">//日志-创建人</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime; <span class="comment">//日志-创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String modifiedUser; <span class="comment">//日志-最后修改执行人</span></span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime; <span class="comment">//日志-最后修改时间</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略了getter setter toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid; <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String salt; <span class="comment">//盐值</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">//电子邮箱</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">//性别:0-女，1-男</span></span><br><span class="line">    <span class="keyword">private</span> String avatar; <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> Integer is_delete; <span class="comment">//是否删除：0-未删除，1-已删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略了 getter setter tostring方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建持久层"><a href="#3-创建持久层" class="headerlink" title="3.创建持久层"></a>3.创建持久层</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>在 DemoStoreApplicationTests 类下创建一个方法来判断是否连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写sql语句"><a href="#2-编写sql语句" class="headerlink" title="2.编写sql语句"></a>2.编写sql语句</h4><p>1.实现注册功能本质就是进行插入操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(...除uid) <span class="keyword">values</span>(#&#123;&#125;...)</span><br></pre></td></tr></table></figure><p>2.由于用户名设置了 unique ，所以每次注册时，都要查询该用户名是否已经注册</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>#&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写接口"><a href="#3-编写接口" class="headerlink" title="3.编写接口"></a>3.编写接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    Integer <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找用户</span></span><br><span class="line">    User <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Mybatis 与 Spring 整合后需要实现实体和数据表的映射关系。实现  Mybatis 和 Spring 整合可以在 Mapper 接口上添加 @Mapper 注解。但建议在 SpringBoot 启动类上添加 @MapperScan(“Mapper包的完整路径”)</p></blockquote><h4 id="4-完成mybatis-xml"><a href="#4-完成mybatis-xml" class="headerlink" title="4.完成mybatis.xml"></a>4.完成mybatis.xml</h4><p>1.在 mybatis <a href="https://mybatis.org/mybatis-3/zh/index.html">官网</a>上找到 mybatis.xml 的头文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace 用于当前映射文件与哪个接口进行映射，并且要求完整路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demostore.Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demostore.Entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isdelete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- id 对应接口的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isdelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userEntityMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>namespace 用于当前映射文件与哪个接口进行映射，并且要求完整路径</li><li>insert 标签里面的 id 表示对应的方法</li><li>id属性：表示给这个映射分配一个唯一的id值，对应的就是resultMap=””<br>type属性：取值是一个类，表示数据库中的查询结果于java中的哪个实体类的结果集进行映射</li></ul><p>3.在 application.properties 中添加 mybatis.mapper-locations 属性的配置，以指定XML文件的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations:classpath:Mapper/*.xml</span><br></pre></td></tr></table></figure><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>需要添加一个注解 @RunWith(SpringRunner.class)，是一个测试启动类，可以加载 Springboot 测试注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testinsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span>+rows);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindByusername</span><span class="params">()</span>&#123;</span><br><span class="line">        String username=<span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        System.out.println(userMapper.findByName(username));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建业务层"><a href="#4-创建业务层" class="headerlink" title="4.创建业务层"></a>4.创建业务层</h3><h4 id="1-异常规划"><a href="#1-异常规划" class="headerlink" title="1.异常规划"></a>1.异常规划</h4><ul><li>为了统一管理自定义异常，可以自定义一个父类，继承 RuntimeException ，生成5个构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"><span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当用户进行注册时，可能会存在用户名已经存在导致无法正常注册，此时应该抛出用户名被占用的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameDuplicateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line"><span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户在注册时，有可能会出现 insert 操作失败，所以创建一个 InsertException 异常类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demostore.Entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户模块业务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建业务层接口目的是为了解耦。仅以操作成功为前提来设计返回值类型，不考虑操作失败的情况；方法中使用抛出异常的方式来表示操作失败。</p></blockquote><h4 id="3-实现接口方法"><a href="#3-实现接口方法" class="headerlink" title="3.实现接口方法"></a>3.实现接口方法</h4><p>1.实现注册的核心功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断用户是否已经被注册</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.findByName(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameDuplicateException</span>(<span class="string">&quot;该用户已被注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将用户插入数据库中</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="keyword">if</span>(rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;用户在插入过程中产生了未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.对密码 MD5 加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">oldpassword</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line"><span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">md5password</span> <span class="operator">=</span> getMD5Password(oldpassword,salt);</span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getMD5Password</span><span class="params">(String password,String salt)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt+password+salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;        </span><br></pre></td></tr></table></figure><h3 id="5-创建控制层"><a href="#5-创建控制层" class="headerlink" title="5.创建控制层"></a>5.创建控制层</h3><h4 id="1-创建一个-JsonResult-工具类"><a href="#1-创建一个-JsonResult-工具类" class="headerlink" title="1.创建一个 JsonResult 工具类"></a>1.创建一个 JsonResult 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略了构造方法和 tostring 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-创建一个-BaseController-类"><a href="#2-创建一个-BaseController-类" class="headerlink" title="2.创建一个 BaseController 类"></a>2.创建一个 BaseController 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> OK=<span class="number">200</span>;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">exceptionhandler</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> InsertException)&#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UsernameDuplicateException)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>@ExceptionHandler 用于统一处理方法抛出的异常</li><li>@RestController = @Controller + @ResponseBody(以 json 形式返回)</li></ul><h4 id="3-创建-UserController-类"><a href="#3-创建-UserController-类" class="headerlink" title="3.创建 UserController 类"></a>3.创建 UserController 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService iUserService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        iUserService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Void&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-前端页面的编写"><a href="#4-前端页面的编写" class="headerlink" title="4.前端页面的编写"></a>4.前端页面的编写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/user/reg&quot;</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Post&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: $(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(json.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册失败！&quot;</span>+json.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册时产生了未知的错误&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;注册功能&quot;&gt;&lt;a href=&quot;#注册功能&quot; class=&quot;headerlink&quot; title=&quot;注册功能&quot;&gt;&lt;/a&gt;注册功能&lt;/h2&gt;&lt;h3 id=&quot;1-连接数据库的配置&quot;&gt;&lt;a href=&quot;#1-连接数据库的配置&quot; class=&quot;headerlink&quot; title=&quot;1.连接数据库的配置&quot;&gt;&lt;/a&gt;1.连接数据库的配置&lt;/h3&gt;</summary>
    
    
    
    <category term="SpringBoot项目实战" scheme="https://code-devotee.github.io/categories/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="电脑商城项目" scheme="https://code-devotee.github.io/tags/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>分治与排序</title>
    <link href="https://code-devotee.github.io/2022/03/23/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <id>https://code-devotee.github.io/2022/03/23/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-04-20T08:09:46.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分治与排序"><a href="#分治与排序" class="headerlink" title="分治与排序"></a>分治与排序</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h4><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> key = arr[(left + right) / <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> l = left;</span><br><span class="line">    <span class="type">int</span> r = right;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[l] &lt; key)</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">while</span>(arr[r] &gt; key)</span><br><span class="line">            r--;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[l],arr[r]);</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(left,r);</span><br><span class="line">    <span class="built_in">quick_sort</span>(l,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、归并排序"><a href="#二、归并排序" class="headerlink" title="二、归并排序"></a>二、归并排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> b, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == e)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (b + e) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = b, j = mid + <span class="number">1</span>, k = b;</span><br><span class="line">    <span class="built_in">msort</span>(b, mid);</span><br><span class="line">    <span class="built_in">msort</span>(mid + <span class="number">1</span>, e);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] &lt;= arr1[j])</span><br><span class="line">            arr2[k++] = arr1[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            arr2[k++] = arr1[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)</span><br><span class="line">        arr2[k++] = arr1[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= e)</span><br><span class="line">        arr2[k++] = arr1[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = b;l &lt;= e;l++)</span><br><span class="line">        arr1[l] = arr2[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用：</p><ul><li>逆序对，例：洛谷p1908</li><li>将一串无序的数字，交换相邻的两个元素，用最少的交换次数使原序列变成不下降序列，实质也是求逆序对</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分治与排序&quot;&gt;&lt;a href=&quot;#分治与排序&quot; class=&quot;headerlink&quot; title=&quot;分治与排序&quot;&gt;&lt;/a&gt;分治与排序&lt;/h2&gt;&lt;h3 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h3&gt;&lt;h4 id=&quot;一、快速排序&quot;&gt;&lt;a href=&quot;#一、快速排序&quot; class=&quot;headerlink&quot; title=&quot;一、快速排序&quot;&gt;&lt;/a&gt;一、快速排序&lt;/h4&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="分治与排序" scheme="https://code-devotee.github.io/tags/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
