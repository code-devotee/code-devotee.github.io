<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://code-devotee.github.io/atom.xml" rel="self"/>
  
  <link href="https://code-devotee.github.io/"/>
  <updated>2022-04-11T09:20:44.120Z</updated>
  <id>https://code-devotee.github.io/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分法</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-04-11T09:20:44.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法</p><span id="more"></span><p>二分法模板</p><p>求最小**的最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p2440</p></blockquote><p>求最大**的最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123; </span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p1182</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;p&gt;使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="https://code-devotee.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>差分与前缀和</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-04-11T09:21:44.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差分与前缀和"><a href="#差分与前缀和" class="headerlink" title="差分与前缀和"></a>差分与前缀和</h1><h3 id="1-差分"><a href="#1-差分" class="headerlink" title="1.差分"></a>1.差分</h3><p>差分的公式：d[i] = a[i] - a[i-1];</p><p>当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变</p><span id="more"></span><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组: 1 3 7 8 2 10</span><br><span class="line">差分: 1 2 4 1 -6 8</span><br><span class="line"></span><br><span class="line">第2个数到第4个数每个数增加1</span><br><span class="line"></span><br><span class="line">数组: 1 4 8 9 2 10</span><br><span class="line">差分: 1 3 4 1 -7 8</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">d[<span class="number">5</span>] -= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-前缀和"><a href="#2-前缀和" class="headerlink" title="2.前缀和"></a>2.前缀和</h3><p>递推公式：S[i] = S[i - 1] + a[i];</p><p>求第 j 项到第 k 项：S[k] - S[j ]</p><h4 id="1-在一个坐标系里，求一个边长为-a-的正方形的和"><a href="#1-在一个坐标系里，求一个边长为-a-的正方形的和" class="headerlink" title="1.在一个坐标系里，求一个边长为 a 的正方形的和"></a>1.在一个坐标系里，求一个边长为 a 的正方形的和</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[100][100];</span><br><span class="line">int arr2[100][100];</span><br><span class="line">int sum;</span><br></pre></td></tr></table></figure><ul><li>先求出坐标系内任意一点的前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        cin &gt;&gt; arr[i][j];</span><br><span class="line">        arr2[i][j] = arr2[i][j - <span class="number">1</span>] + arr2[i - <span class="number">1</span>][j] - arr2[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求变长为 a 的正方形的和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = a + <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = a + <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        sum = arr2[i][j] - arr2[i - a][j] - arr2[i][j - a] + arr2[i - a][j - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-求一点经过线段的次数"><a href="#2-求一点经过线段的次数" class="headerlink" title="2.求一点经过线段的次数"></a>2.求一点经过线段的次数</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一点从 3 到 1 再到 4</span><br><span class="line"></span><br><span class="line">1-22-33-4</span><br><span class="line">221</span><br></pre></td></tr></table></figure><p>解决方法：开头+1，结尾-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="built_in">min</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">max</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    cnt[left]++;</span><br><span class="line">    cnt[right]--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再利用前缀和求出每一段的次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">    cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-求一段由01组成的且01数量相等的最长子序列"><a href="#3-求一段由01组成的且01数量相等的最长子序列" class="headerlink" title="3.求一段由01组成的且01数量相等的最长子序列"></a>3.求一段由01组成的且01数量相等的最长子序列</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 0 0 1 1 0 0</span><br></pre></td></tr></table></figure><ul><li>若为0，则减1，若为1，则加1 ，求出前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每次更新比此前记录 ans 还要大的值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span> + ans;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] - arr[i - <span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;差分与前缀和&quot;&gt;&lt;a href=&quot;#差分与前缀和&quot; class=&quot;headerlink&quot; title=&quot;差分与前缀和&quot;&gt;&lt;/a&gt;差分与前缀和&lt;/h1&gt;&lt;h3 id=&quot;1-差分&quot;&gt;&lt;a href=&quot;#1-差分&quot; class=&quot;headerlink&quot; title=&quot;1.差分&quot;&gt;&lt;/a&gt;1.差分&lt;/h3&gt;&lt;p&gt;差分的公式：d[i] = a[i] - a[i-1];&lt;/p&gt;
&lt;p&gt;当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分与前缀和" scheme="https://code-devotee.github.io/tags/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Intellij idea 快捷键</title>
    <link href="https://code-devotee.github.io/2022/03/23/Intellij%20idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://code-devotee.github.io/2022/03/23/Intellij%20idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-17T15:46:45.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intellij-idea-快捷键"><a href="#Intellij-idea-快捷键" class="headerlink" title="Intellij idea 快捷键"></a>Intellij idea 快捷键</h1><span id="more"></span><ul><li><p>调用构造方法、setter方法等   ：    <strong>Alt + Ins</strong></p></li><li><p>调用 main 方法：<strong>main + 回车          或            pvsm + 回车</strong></p></li><li><p>注释的快捷键：<strong>CTRL + SHIFT + /</strong></p></li><li><p>将多行代码进行改变位置</p><p>1。代码 右 移 ：Tab键<br>选中多行代码，按Tab</p><p>2。代码 左 移 ：Shift+Tab键<br>选中多行代码，按Shift+Tab键</p><p>3。代码 上 移 ：Shift+Alt +方向上键<br>选中多行代码，按Shift+Alt+方向上键 ↑</p><p>4。代码 下 移 ：Shift+Alt +方向下键<br>选中多行代码，按Shift+Alt+方向下键↓</p></li><li><p>导包：Alt + enter</p></li><li><p>换行：shift + enter</p></li></ul><h1 id="eclipse-快捷键"><a href="#eclipse-快捷键" class="headerlink" title="eclipse 快捷键"></a>eclipse 快捷键</h1><ul><li><p>创建 setter、getter、构造函数等：<strong>SHIFT + ALT + S</strong></p></li><li><p>格式化：<strong>ctrl + shift + f</strong></p></li><li><p>关闭Window： Ctrl+W</p></li><li><p>删除行： <strong>Ctrl+D</strong></p></li><li><p>上下移动代码行： <strong>Alt+↑,↓</strong></p></li><li><p>Debug单步StepOver：F6</p><p>Debug进入方法StepInto： F5</p><p>Debug步出方法StepReturn/StepOut： F7</p><p>Debug继续到下一断点Resume： F8</p><p>Debug查看语句执行结果： 选中后Ctrl+Shift+I</p></li><li><p>添加类的 import 导入：ctrl + shift + m</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Intellij-idea-快捷键&quot;&gt;&lt;a href=&quot;#Intellij-idea-快捷键&quot; class=&quot;headerlink&quot; title=&quot;Intellij idea 快捷键&quot;&gt;&lt;/a&gt;Intellij idea 快捷键&lt;/h1&gt;</summary>
    
    
    
    <category term="web" scheme="https://code-devotee.github.io/categories/web/"/>
    
    
    <category term="工具" scheme="https://code-devotee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>I/o 流</title>
    <link href="https://code-devotee.github.io/2022/03/23/Io%20%E6%B5%81/"/>
    <id>https://code-devotee.github.io/2022/03/23/Io%20%E6%B5%81/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-17T16:32:55.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-o-流"><a href="#I-o-流" class="headerlink" title="I/o 流"></a>I/o 流</h1><p>java语言定义了许多专门负责输入输出的流，这些类都放在java.io包中。其中，所有输入流类都是抽象类InputStream（字节输入流）或Reader（字符输入流）的子类；而所有输出流都是抽象类OutputStream（字节输出流）或抽象类Writer（字符输出流）的子类。</p><span id="more"></span><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><p>InputStream类是字节输入流的抽象类，是所有字节输入流的父类。</p><p>下面是一些常用的方法；</p><ul><li>read()方法：从输入流中读取下一个字节，如果已经读到流末尾而没有可用的字节，则返回值为-1；</li><li>read(byte[] b): 从输入流中读入一定长度的字节，并以整数的形式返回字节数。</li><li>reset()方法:将输入指针返回到当前所做的标记处。</li><li>skip(long n)：跳过输入流上的n个字节并返回实际跳过的字节数</li><li>close()方法：关闭此输入流并释放与该流相关的所有系统资源</li></ul><p>Reader类是字符输入流的抽像类，Reader类中的方法与InputStream中的方法类似</p><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><p> OutputStream类中的所有方法均返回void，下面对OutputStream的方法做简单介绍</p><ul><li>write(int b)：将指定的字节写入此输出流</li><li>write(byte[] b)方法：将b个字节从指定的byte数组写入此输出流</li><li>write(byte[],int offf,int len)：将指定byte数组中从偏移量off开始的len个字节写入此输出流</li><li>flush()方法：彻底完成输出并清空缓存区</li><li>close()方法：关闭输出流</li></ul><p>writer类是字符输出流的抽象类</p><h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><p>文件的创建和删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>File 类的常用的方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>exits()</td><td>判断文件是否存在</td></tr><tr><td>length()</td><td>获取文件的长度（以字节为单位）</td></tr><tr><td>getAbsolutePath()</td><td>获取文件的绝对路径</td></tr><tr><td>getPath()</td><td>获取相对路径</td></tr><tr><td>isFile()</td><td>判断是否是文件</td></tr><tr><td>isDirectory()</td><td>判断是否是一个文件夹</td></tr><tr><td>delete()</td><td>当前文件删除是否成功</td></tr><tr><td>createNewFile()</td><td>创建文件是否成功</td></tr></tbody></table><h3 id="FileInputStream类和-FileOutputStream-类"><a href="#FileInputStream类和-FileOutputStream-类" class="headerlink" title="FileInputStream类和 FileOutputStream 类"></a>FileInputStream类和 FileOutputStream 类</h3><h4 id="FileInputStream-类"><a href="#FileInputStream-类" class="headerlink" title="FileInputStream 类"></a>FileInputStream 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO3</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  字节流：文件字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   -InputStream是所有字节输入流的顶层父类，是一个抽象类。如果要用，需要使用子类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件&quot;</span>+file.createNewFile());</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="comment">/*每次读取一个字节</span></span><br><span class="line"><span class="comment">System.out.println(is.read());*/</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="comment">//int read​()： 从文件中读取一个字节数的数据。并返回读取到的这个字节。 如果读取结束，返回的是-1.</span></span><br><span class="line"><span class="keyword">while</span>((data = is.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println((<span class="type">char</span>)data);</span><br><span class="line"><span class="comment">//System.out.println(data);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//每次读取个数</span></span><br><span class="line">            <span class="type">byte</span>[] datas = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = is.read(datas))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="keyword">new</span> <span class="title class_">String</span>(datas,<span class="number">0</span>,data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以把上面的例子改成下面这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO5</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line"><span class="comment">//InputStream is = new FileInputStream(&quot;A.txt&quot;);</span></span><br><span class="line">System.out.println(is.available());</span><br><span class="line"><span class="type">byte</span> []datas = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">if</span>((data = is.read(datas))!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(datas,<span class="number">0</span>,data));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//为什么要先判断是否为null,因为不判断 如果真的为空 就报异常</span></span><br><span class="line"><span class="keyword">if</span>(is!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FileOutputStream-类"><a href="#FileOutputStream-类" class="headerlink" title="FileOutputStream 类"></a>FileOutputStream 类</h4><p>注意：在关闭流之前，应该先flush() 清空缓存区。因为数据是先被读到内存中，然后用数据写入到文件中，当你数据读完的时候，并不代表你的数据已经写完了，因为还有一部分可能会留在内存缓存区中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO6</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写文件，OutputSream  子类  FileOutputStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//用FileOutputStream有参构造方法读取当前文件目录的c.txt文件</span></span><br><span class="line"><span class="comment">//如果这个文件不存在，那么就创建一个</span></span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;B.txt&quot;</span>);</span><br><span class="line">os.write(<span class="number">65</span>);</span><br><span class="line">os.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO7</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D.txt&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;没有一幅图解决不了的不理解&quot;</span>;</span><br><span class="line"><span class="comment">//String类给我们提供的有用于转换为byte数组的方法</span></span><br><span class="line"><span class="type">byte</span>[] bytes = message.getBytes();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileReader-和-FileWriter-类"><a href="#FileReader-和-FileWriter-类" class="headerlink" title="FileReader 和 FileWriter 类"></a>FileReader 和 FileWriter 类</h2><p>使用FileOutputStream向文件中写入数据与使用FileInputStream 像文件中读取数据时，都是按照字节或字节数组的读取方法读取，如果读取不好，可能会出现乱码的现象，此时采用字符流Reader 或 Writer 类可避免这种现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO8</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//字符流  Reader  抽象类--&gt;InputStreamReader --&gt;FileReader</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">while</span>((data = reader.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="type">char</span>)data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"><span class="type">int</span> readcount;</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>((readcount=reader.read())!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,readcount));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带缓存的输入输出流"><a href="#带缓存的输入输出流" class="headerlink" title="带缓存的输入输出流"></a>带缓存的输入输出流</h3><p>缓存是I/O的一种性能优化。缓存流为I/O流增加了内存缓存区。有了缓存区，使得在流上执行skip(),mark(),reset()方法都成为可能。</p><h4 id="BufferedInputStream-与-BufferedOutputStream-类"><a href="#BufferedInputStream-与-BufferedOutputStream-类" class="headerlink" title="BufferedInputStream 与 BufferedOutputStream 类"></a>BufferedInputStream 与 BufferedOutputStream 类</h4><p>BufferedInputStream 类可以对所有 InputStream 类进行带缓存区的包装以达到性能的优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO10</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//字符缓冲区流   有独有的方法  一次读取一行</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//读取一行  返回是字符串  对字符串进行非null判断</span></span><br><span class="line"><span class="comment">//循环读取</span></span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedReader-与-BufferedWriter-类"><a href="#BufferedReader-与-BufferedWriter-类" class="headerlink" title="BufferedReader 与 BufferedWriter 类"></a>BufferedReader 与 BufferedWriter 类</h4><p>BufferedReader 类与BufferedWriter 类分别继承自Reader 类和Writer类。这两个类同样具有内部缓存区，都是以行为单位进行输入/输出。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>read()</td><td>读取单个字符</td></tr><tr><td>readLine()</td><td>读取一个文本行，并将其返回字符串。若无数据可读，则返回null</td></tr><tr><td>Write(String s,int off,int len)</td><td>写入字符串的某一部分</td></tr><tr><td>flush()</td><td>刷新该流的缓存</td></tr><tr><td>newLine()</td><td>写入一个行分隔符</td></tr></tbody></table><p>在使用BufferedWriter 类的Writer()方法时，数据并没有立刻被写入输出流，而是首先进入缓存区，如果想立刻将缓存区中的数据写入输出流，一定要调用flush()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO10</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//字符缓冲区流   有独有的方法  一次读取一行</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//读取一行  返回是字符串  对字符串进行非null判断</span></span><br><span class="line"><span class="comment">//循环读取</span></span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;I-o-流&quot;&gt;&lt;a href=&quot;#I-o-流&quot; class=&quot;headerlink&quot; title=&quot;I/o 流&quot;&gt;&lt;/a&gt;I/o 流&lt;/h1&gt;&lt;p&gt;java语言定义了许多专门负责输入输出的流，这些类都放在java.io包中。其中，所有输入流类都是抽象类InputStream（字节输入流）或Reader（字符输入流）的子类；而所有输出流都是抽象类OutputStream（字节输出流）或抽象类Writer（字符输出流）的子类。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://code-devotee.github.io/categories/web/"/>
    
    
    <category term="工具" scheme="https://code-devotee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>IOC容器</title>
    <link href="https://code-devotee.github.io/2022/03/23/IOC%E5%AE%B9%E5%99%A8/"/>
    <id>https://code-devotee.github.io/2022/03/23/IOC%E5%AE%B9%E5%99%A8/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-18T00:47:44.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h2 id="spring-中相关概念"><a href="#spring-中相关概念" class="headerlink" title="spring 中相关概念"></a>spring 中相关概念</h2><p>（1）轻量: Spring 框架使用的 jar 都比较小，一般在 1M 以下或者几百 kb ，Spring 核心功能的 jar 总共在 3M 左右。Spring 框架运行占用的资源少，运行效率高，不依赖其他 jar </p><p>（2）依赖:  classa 使用 classb 中的属性和方法，则 classa 依赖 classb</p><span id="more"></span><h2 id="一、什么是IOC"><a href="#一、什么是IOC" class="headerlink" title="一、什么是IOC"></a>一、什么是IOC</h2><p>控制: 创建对象，对象的属性赋值，对象之间的关系管理</p><p>正转: 有开发人员在代码中，使用 new 构造方法创建对象，开发人员主动管理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();   <span class="comment">//在代码中，创建对象。---正转</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反转: 把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现，由容器代替开发人员管理对象，创建对象，给属性赋值</p><p>（2）使用IOC目地，为了耦合度降低</p><p>（3）做入门案例就是IOC实现</p><p>（4）IOC 是一个思想: 把对象的创建，赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是由外部资源完成的</p><p>（5）为什么要使用 IOC: 目地就是减少对代码的改动，也能实现不同的功能，也就是解耦合。</p><p>（6）IOC技术实现</p><p>DI 是IOC 的技术实现，</p><p>DI （Dependency Injection): 依赖注入，只需要在程序中提供要使用的对象名称就可以了，至于对象如何在容器中创建，赋值，查找都由容器内部实现。</p><h2 id="二、底层原理"><a href="#二、底层原理" class="headerlink" title="二、底层原理"></a>二、底层原理</h2><p>xml解析、工厂模式、反射</p><h2 id="三、IOC过程"><a href="#三、IOC过程" class="headerlink" title="三、IOC过程"></a>三、IOC过程</h2><p>第一步: xml配置文件，配置创建的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一步: 有service类和dao类，创建工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">classValue</span> <span class="operator">=</span> class属性值;   <span class="comment">//xml解析</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(classValue);  <span class="comment">//通过反射创建对象</span></span><br><span class="line">        <span class="keyword">return</span> (UserDao)clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目的: 降低耦合度</strong></p><h2 id="四、IOC接口"><a href="#四、IOC接口" class="headerlink" title="四、IOC接口"></a>四、IOC接口</h2><p>1.IOC思想基于IOC容器完成的，IOC容器底层就是对象工厂</p><p>2.Spring 提供了IOC容器实现的两种方式: （两个接口）</p><p>（1）BeanFactory  是 Spring 内部的使用接口，不提供开发人员进行使用</p><p>（2）ApplicationContext  是 BeanFactory 接口的子接口，提供了更多更强大的功能，一般是开发人员中使用的</p><h2 id="五、Bean管理XML方式"><a href="#五、Bean管理XML方式" class="headerlink" title="五、Bean管理XML方式"></a>五、Bean管理XML方式</h2><p><strong>1.什么是Bean管理: Bean管理指的是两个操作</strong></p><p>（1）Spring创建对象</p><p>（2）Spring注入属性</p><p><strong>2.Bean管理操作有两种方式</strong></p><p>（1）基于xml配置文件方式实现</p><p>（2）基于注解方式实现</p><p><strong>3.IOC操作Bean管理（基于 xml 方式）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1）在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建</p><p>（2）在 bean 标签有很多属性，介绍常见的属性</p><ul><li>id 属性: 唯一标识</li><li>class 属性: 类全路径（包类路径）</li></ul><p>（3）创建对象的时候，默认也是执行无参数构造方法完成对象创建</p><p><strong>4.基于xml方式注入属性</strong></p><p>（1）DI: 依赖注入，就是注入属性</p><p>第一种注入方式: 使用 set 方法进行注入</p><p>第二种注入方式: 使用有参构造进行注入</p><p><strong>5.IOC操作Bean管理（xml注入其他类型属性）</strong></p><p>1）字面量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string x=&quot;ABC&quot; 意思是把字面量&quot;ABC&quot; 赋值给变量X</span><br></pre></td></tr></table></figure><ul><li>null 值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性值包含特殊符号</li></ul><p>把 &lt; &gt; 进行转义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt ; + ;  和  &amp;gt + ;        分别表示小于大于符号</span><br></pre></td></tr></table></figure><p>把带特殊符号内容写到CDATA</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）注入属性-外部 bean</p><ul><li>创建两个类 service 类和 dao 类</li><li>在 service 调用 dao 里面的方法</li><li>在 spring 的配置文件中配置</li></ul><p>（3）注入属性-内部 bean </p><ul><li>一对多关系: 部门和员工</li></ul><p>一个部门有多个员工，一个员工属于一个部门</p><p>部门是一，员工是多</p><ul><li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</li></ul><p>（4）级联赋值</p><p>有两种方法</p><p><strong>6.IOC操作 Bean 管理（ xml 注入集合属性）</strong></p><p>（1）注入数组类型属性</p><p>（2）注入 List 集合类型属性</p><p>（3）注入 Map 集合类型属性</p><ul><li>创建类，定义数组、List、map、set 类型属性，生成对应 set 方法</li></ul><p>（4）在集合里面设置对象类型值</p><p>（5）把集合注入部分提取出来</p><ul><li>在 spring 配置文件中引入名称 util</li><li>使用 util 标签完成 list 集合注入提取</li></ul><p><strong>7. IOC 操作 Bean 管理（FactoryBean）</strong></p><p>（1）Spring 有两种 bean ，一种普通 bean，另外一种工厂 bean （FactoryBean）</p><p>（2）普通 bean: 在配置文件中定义 bean 类型就是返回类型</p><p>（3）工厂 bean: 在配置文件中定义 bean 类型可以和返回类型不一样</p><ul><li>创建类，让这个类作为工厂 bean ，实现接口 FactoryBean</li><li>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li></ul><p><strong>8.IOC操作 Bean 管理（bean作用域）</strong></p><p>（1）在 Spring 里面，设置创建 bean 实例时单实例还是多实例</p><p>（2）在 Spring 里面，默认情况下，bean 是单实例对象</p><p>（3）如何设置单实例还是多实例</p><ul><li>在 Spring 配置文件中 bean 标签里面有属性（scope）用于设置单实例还是多实例</li><li>scope 属性值</li></ul><p>第一个值  默认值: singleton，表示是单实例对象</p><p>第二个值  prototype ，表示是多实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.spring5.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;booklist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>9.IOC 操作 Bean管理（bean 生命周期）</strong></p><p>（1）生命周期</p><p>从对象创建到对象销毁的过程</p><p>（2) bean 生命周期</p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和其他 bean 引用（调用 set 方法）</li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ul><p><strong>10.IOC操作 Bean 管理（xml 自动装配）</strong></p><p>（1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><p>（2）演示自动装配过程</p><ul><li>根据属性名称自动注入</li><li>根据属性类型自动注入</li></ul><p><strong>11.IOC操作 Bean 管理（外部属性文件）</strong></p><p>（1）创建外部属性文件，properties 格式文件，写数据库信息</p><p>（2）把外部 properties 属性</p><ul><li>引入 context 名称空间</li><li>在 spring 配置文件使用标签引入外部属性文件</li></ul><p><strong>12.IOC操作 Bean 管理（基于注解方式）</strong></p><p>（1）什么是注解</p><ul><li>注解是代码特殊标记，格式: @注解名称（属性名称=属性值，属性名称=属性值）</li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解目的: 简化 xml 配置</li></ul><p>（2）Spring 针对 Bean 管理中创建对象提供注解</p><ul><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ul><p>上面四个注解功能是一样的，都可以用来创建 bean 实例</p><p>（3）基于注解方式实现对象创建</p><p>第一步 ，引入依赖</p><p>第二步，开启组件扫描</p><p>第三步，创建类，在类上面创建对象注解</p><p><strong>13.IOC操作 Bean 管理（注入属性 @Autowired 和 @Qualifier）</strong></p><p>（1）@Autowired: 根据属性类型进行自动装配</p><p>第一步: 把 service 和 dao 对象创建，在 service 和 dao 添加创建对象注解</p><p>第二步: 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><p>（2）@Qualifier: 根据属性名称进行注入</p><p>这个 @Qualifier: 根据名称进行注入</p><p>（3）@Resource: 可以根据类型注入，可以根据名称注入</p><p>（4）@Value: 注入普通类型属性</p><p><strong>14. 完全注解开发</strong></p><p>（1）创建配置类，替代 xml 配置文件</p><p>（2）编写测试类</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IOC容器&quot;&gt;&lt;a href=&quot;#IOC容器&quot; class=&quot;headerlink&quot; title=&quot;IOC容器&quot;&gt;&lt;/a&gt;IOC容器&lt;/h1&gt;&lt;h2 id=&quot;spring-中相关概念&quot;&gt;&lt;a href=&quot;#spring-中相关概念&quot; class=&quot;headerlink&quot; title=&quot;spring 中相关概念&quot;&gt;&lt;/a&gt;spring 中相关概念&lt;/h2&gt;&lt;p&gt;（1）轻量: Spring 框架使用的 jar 都比较小，一般在 1M 以下或者几百 kb ，Spring 核心功能的 jar 总共在 3M 左右。Spring 框架运行占用的资源少，运行效率高，不依赖其他 jar &lt;/p&gt;
&lt;p&gt;（2）依赖:  classa 使用 classb 中的属性和方法，则 classa 依赖 classb&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://code-devotee.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="sprig" scheme="https://code-devotee.github.io/tags/sprig/"/>
    
  </entry>
  
  <entry>
    <title>用户注册</title>
    <link href="https://code-devotee.github.io/2022/03/23/%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>https://code-devotee.github.io/2022/03/23/%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-22T14:22:34.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="1-连接数据库的配置"><a href="#1-连接数据库的配置" class="headerlink" title="1.连接数据库的配置"></a>1.连接数据库的配置</h3><span id="more"></span><p>在 application.properties 文件下配置如下信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">#rjh623824asdf</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:Mapper/*.xml</span></span><br></pre></td></tr></table></figure><blockquote><p>mybatis.mapper-locations 的作用是扫描当前根目录下的Mapper文件的所有xml文件</p></blockquote><h3 id="2-创建实体层"><a href="#2-创建实体层" class="headerlink" title="2.创建实体层"></a>2.创建实体层</h3><p>根据数据库的数据类型和数据名称创建实体层，由于实体层的每个实体都有日志的4个信息，所以可以将这4个数据单独作为父类，从而提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser; <span class="comment">//日志-创建人</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime; <span class="comment">//日志-创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String modifiedUser; <span class="comment">//日志-最后修改执行人</span></span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime; <span class="comment">//日志-最后修改时间</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略了getter setter toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid; <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String salt; <span class="comment">//盐值</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">//电子邮箱</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">//性别:0-女，1-男</span></span><br><span class="line">    <span class="keyword">private</span> String avatar; <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> Integer is_delete; <span class="comment">//是否删除：0-未删除，1-已删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略了 getter setter tostring方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建持久层"><a href="#3-创建持久层" class="headerlink" title="3.创建持久层"></a>3.创建持久层</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>在 DemoStoreApplicationTests 类下创建一个方法来判断是否连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写sql语句"><a href="#2-编写sql语句" class="headerlink" title="2.编写sql语句"></a>2.编写sql语句</h4><p>1.实现注册功能本质就是进行插入操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(...除uid) <span class="keyword">values</span>(#&#123;&#125;...)</span><br></pre></td></tr></table></figure><p>2.由于用户名设置了 unique ，所以每次注册时，都要查询该用户名是否已经注册</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>#&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写接口"><a href="#3-编写接口" class="headerlink" title="3.编写接口"></a>3.编写接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    Integer <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找用户</span></span><br><span class="line">    User <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Mybatis 与 Spring 整合后需要实现实体和数据表的映射关系。实现  Mybatis 和 Spring 整合可以在 Mapper 接口上添加 @Mapper 注解。但建议在 SpringBoot 启动类上添加 @MapperScan(“Mapper包的完整路径”)</p></blockquote><h4 id="4-完成mybatis-xml"><a href="#4-完成mybatis-xml" class="headerlink" title="4.完成mybatis.xml"></a>4.完成mybatis.xml</h4><p>1.在 mybatis <a href="https://mybatis.org/mybatis-3/zh/index.html">官网</a>上找到 mybatis.xml 的头文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace 用于当前映射文件与哪个接口进行映射，并且要求完整路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demostore.Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demostore.Entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isdelete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- id 对应接口的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isdelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userEntityMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>namespace 用于当前映射文件与哪个接口进行映射，并且要求完整路径</li><li>insert 标签里面的 id 表示对应的方法</li><li>id属性：表示给这个映射分配一个唯一的id值，对应的就是resultMap=””<br>type属性：取值是一个类，表示数据库中的查询结果于java中的哪个实体类的结果集进行映射</li></ul><p>3.在 application.properties 中添加 mybatis.mapper-locations 属性的配置，以指定XML文件的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations:classpath:Mapper/*.xml</span><br></pre></td></tr></table></figure><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>需要添加一个注解 @RunWith(SpringRunner.class)，是一个测试启动类，可以加载 Springboot 测试注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testinsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span>+rows);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindByusername</span><span class="params">()</span>&#123;</span><br><span class="line">        String username=<span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        System.out.println(userMapper.findByName(username));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建业务层"><a href="#4-创建业务层" class="headerlink" title="4.创建业务层"></a>4.创建业务层</h3><h4 id="1-异常规划"><a href="#1-异常规划" class="headerlink" title="1.异常规划"></a>1.异常规划</h4><ul><li>为了统一管理自定义异常，可以自定义一个父类，继承 RuntimeException ，生成5个构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"><span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当用户进行注册时，可能会存在用户名已经存在导致无法正常注册，此时应该抛出用户名被占用的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameDuplicateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line"><span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户在注册时，有可能会出现 insert 操作失败，所以创建一个 InsertException 异常类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service.Ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="comment">//实现5个构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demostore.Entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户模块业务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建业务层接口目的是为了解耦。仅以操作成功为前提来设计返回值类型，不考虑操作失败的情况；方法中使用抛出异常的方式来表示操作失败。</p></blockquote><h4 id="3-实现接口方法"><a href="#3-实现接口方法" class="headerlink" title="3.实现接口方法"></a>3.实现接口方法</h4><p>1.实现注册的核心功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断用户是否已经被注册</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.findByName(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameDuplicateException</span>(<span class="string">&quot;该用户已被注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将用户插入数据库中</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="keyword">if</span>(rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;用户在插入过程中产生了未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.对密码 MD5 加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">oldpassword</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line"><span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">md5password</span> <span class="operator">=</span> getMD5Password(oldpassword,salt);</span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getMD5Password</span><span class="params">(String password,String salt)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt+password+salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;        </span><br></pre></td></tr></table></figure><h3 id="5-创建控制层"><a href="#5-创建控制层" class="headerlink" title="5.创建控制层"></a>5.创建控制层</h3><h4 id="1-创建一个-JsonResult-工具类"><a href="#1-创建一个-JsonResult-工具类" class="headerlink" title="1.创建一个 JsonResult 工具类"></a>1.创建一个 JsonResult 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demostore.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略了构造方法和 tostring 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-创建一个-BaseController-类"><a href="#2-创建一个-BaseController-类" class="headerlink" title="2.创建一个 BaseController 类"></a>2.创建一个 BaseController 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> OK=<span class="number">200</span>;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">exceptionhandler</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> InsertException)&#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UsernameDuplicateException)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>@ExceptionHandler 用于统一处理方法抛出的异常</li><li>@RestController = @Controller + @ResponseBody(以 json 形式返回)</li></ul><h4 id="3-创建-UserController-类"><a href="#3-创建-UserController-类" class="headerlink" title="3.创建 UserController 类"></a>3.创建 UserController 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService iUserService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        iUserService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Void&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-前端页面的编写"><a href="#4-前端页面的编写" class="headerlink" title="4.前端页面的编写"></a>4.前端页面的编写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/user/reg&quot;</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Post&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: $(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(json.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册失败！&quot;</span>+json.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;注册时产生了未知的错误&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;注册功能&quot;&gt;&lt;a href=&quot;#注册功能&quot; class=&quot;headerlink&quot; title=&quot;注册功能&quot;&gt;&lt;/a&gt;注册功能&lt;/h2&gt;&lt;h3 id=&quot;1-连接数据库的配置&quot;&gt;&lt;a href=&quot;#1-连接数据库的配置&quot; class=&quot;headerlink&quot; title=&quot;1.连接数据库的配置&quot;&gt;&lt;/a&gt;1.连接数据库的配置&lt;/h3&gt;</summary>
    
    
    
    <category term="SpringBoot项目实战" scheme="https://code-devotee.github.io/categories/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="电脑商城项目" scheme="https://code-devotee.github.io/tags/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
