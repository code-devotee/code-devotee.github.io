<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://code-devotee.github.io/atom.xml" rel="self"/>
  
  <link href="https://code-devotee.github.io/"/>
  <updated>2022-05-24T06:58:20.160Z</updated>
  <id>https://code-devotee.github.io/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分法</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-05-24T06:58:20.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法</p><span id="more"></span><h3 id="整数二分法模板"><a href="#整数二分法模板" class="headerlink" title="整数二分法模板"></a>整数二分法模板</h3><p>求最小**的最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p2440</p></blockquote><p>求最大**的最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123; </span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：洛谷p1182</p></blockquote><h3 id="浮点数的二分法"><a href="#浮点数的二分法" class="headerlink" title="浮点数的二分法"></a>浮点数的二分法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left - right &gt; x)&#123;</span><br><span class="line">    <span class="type">double</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">        left = mid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;p&gt;使用情况：当题目出现 “最短跳跃距离的最大值” 类似的语句时，就用二分法&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="https://code-devotee.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>差分与前缀和</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-04-11T09:21:44.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差分与前缀和"><a href="#差分与前缀和" class="headerlink" title="差分与前缀和"></a>差分与前缀和</h1><h3 id="1-差分"><a href="#1-差分" class="headerlink" title="1.差分"></a>1.差分</h3><p>差分的公式：d[i] = a[i] - a[i-1];</p><p>当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变</p><span id="more"></span><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组: 1 3 7 8 2 10</span><br><span class="line">差分: 1 2 4 1 -6 8</span><br><span class="line"></span><br><span class="line">第2个数到第4个数每个数增加1</span><br><span class="line"></span><br><span class="line">数组: 1 4 8 9 2 10</span><br><span class="line">差分: 1 3 4 1 -7 8</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">d[<span class="number">5</span>] -= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-前缀和"><a href="#2-前缀和" class="headerlink" title="2.前缀和"></a>2.前缀和</h3><p>递推公式：S[i] = S[i - 1] + a[i];</p><p>求第 j 项到第 k 项：S[k] - S[j ]</p><h4 id="1-在一个坐标系里，求一个边长为-a-的正方形的和"><a href="#1-在一个坐标系里，求一个边长为-a-的正方形的和" class="headerlink" title="1.在一个坐标系里，求一个边长为 a 的正方形的和"></a>1.在一个坐标系里，求一个边长为 a 的正方形的和</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int arr[100][100];</span><br><span class="line">int arr2[100][100];</span><br><span class="line">int sum;</span><br></pre></td></tr></table></figure><ul><li>先求出坐标系内任意一点的前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        cin &gt;&gt; arr[i][j];</span><br><span class="line">        arr2[i][j] = arr2[i][j - <span class="number">1</span>] + arr2[i - <span class="number">1</span>][j] - arr2[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求变长为 a 的正方形的和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = a + <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = a + <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">        sum = arr2[i][j] - arr2[i - a][j] - arr2[i][j - a] + arr2[i - a][j - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-求一点经过线段的次数"><a href="#2-求一点经过线段的次数" class="headerlink" title="2.求一点经过线段的次数"></a>2.求一点经过线段的次数</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一点从 3 到 1 再到 4</span><br><span class="line"></span><br><span class="line">1-22-33-4</span><br><span class="line">221</span><br></pre></td></tr></table></figure><p>解决方法：开头+1，结尾-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="built_in">min</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">max</span>(arr[i],arr[i + <span class="number">1</span>]);</span><br><span class="line">    cnt[left]++;</span><br><span class="line">    cnt[right]--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再利用前缀和求出每一段的次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">    cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-求一段由01组成的且01数量相等的最长子序列"><a href="#3-求一段由01组成的且01数量相等的最长子序列" class="headerlink" title="3.求一段由01组成的且01数量相等的最长子序列"></a>3.求一段由01组成的且01数量相等的最长子序列</h4><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 0 0 1 1 0 0</span><br></pre></td></tr></table></figure><ul><li>若为0，则减1，若为1，则加1 ，求出前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每次更新比此前记录 ans 还要大的值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span> + ans;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] - arr[i - <span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;差分与前缀和&quot;&gt;&lt;a href=&quot;#差分与前缀和&quot; class=&quot;headerlink&quot; title=&quot;差分与前缀和&quot;&gt;&lt;/a&gt;差分与前缀和&lt;/h1&gt;&lt;h3 id=&quot;1-差分&quot;&gt;&lt;a href=&quot;#1-差分&quot; class=&quot;headerlink&quot; title=&quot;1.差分&quot;&gt;&lt;/a&gt;1.差分&lt;/h3&gt;&lt;p&gt;差分的公式：d[i] = a[i] - a[i-1];&lt;/p&gt;
&lt;p&gt;当第 n 个数到 第 m 个数增加 c 时，只有第 d[n] 和 d[m] 的值有变化，d[n] += c, d[m + 1] -= c, 其余差分不变&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分与前缀和" scheme="https://code-devotee.github.io/tags/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——背包问题</title>
    <link href="https://code-devotee.github.io/2022/04/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://code-devotee.github.io/2022/04/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-11T09:20:47.000Z</published>
    <updated>2022-06-22T06:52:21.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划——背包问题"><a href="#动态规划——背包问题" class="headerlink" title="动态规划——背包问题"></a>动态规划——背包问题</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p>物品数量有限，要么选择该物品，要么不选这个物品</p><ol><li>朴素做法（开二维空间）</li></ol><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line">arr[i][j] = arr[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i]) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>从二维优化到一维（空间优化）</li></ol><p>因为f[i]只用到了arr[i-1]，而没有用到arr[i-2]…arr[0]，所以可以直接用一维数组。</p><p>如果直接删掉，则：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v[i];j &lt;= m;j++) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[j - v[i]] 是第 i 层的，解决方案为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>物品有无限个</p><ol><li>朴素做法（暴力dp)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>;k*v[i] &lt;= j;k++) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>优化状态转移方程，时间复杂度为O(n2)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[i][j] = max(arr[i-1][j],arr[i-1][j-v]+w,arr[i-1][j-2v]+2w,...)</span><br><span class="line">arr[i][j-v] = max(          arr[i-1][j-v],  arr[i-1][j-2v]+w,...)</span><br><span class="line">即：</span><br><span class="line">arr[i][j] = max(arr[i-1][j],arr[i][j-v]);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j++) &#123;</span><br><span class="line">arr[i][j] = arr[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j &gt;= v[i]) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">max</span>(arr[i][j], arr[i][j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用一维数组</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1010</span>], w[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v[i];j &lt;= m;j++) &#123;</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; arr[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>不能用完全背包来优化多重背包</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i<span class="number">-1</span>][j], f[i<span class="number">-1</span>][j-v]+w, f[i<span class="number">-1</span>][j<span class="number">-2</span>v]+<span class="number">2</span>w, f[i<span class="number">-1</span>][j<span class="number">-3</span>v]+<span class="number">3</span>w,.., f[i<span class="number">-1</span>][j-kv]+kw)</span><br><span class="line">f[i][j-v] = <span class="built_in">max</span>(         f[i<span class="number">-1</span>][j-v],   f[i<span class="number">-1</span>][j<span class="number">-2</span>v]+w,  f[i<span class="number">-1</span>][j<span class="number">-3</span>v]+<span class="number">2</span>w,.., f[i<span class="number">-1</span>][j-kv]+(k<span class="number">-1</span>)w)</span><br><span class="line"><span class="comment">// 个数无限，只受背包容积j限制，而每次都是同步的 k 个 v[i]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重背包</span></span><br><span class="line">f[i,j] = <span class="built_in">max</span>(f[i<span class="number">-1</span>,j], f[i<span class="number">-1</span>,j-v]+w, f[i<span class="number">-1</span>,j<span class="number">-2</span>v]+<span class="number">2</span>w,.., f[i<span class="number">-1</span>,j-sv] + sw ) </span><br><span class="line">f[i,j-v] = <span class="built_in">max</span>(        f[i<span class="number">-1</span>,j-v],   f[i<span class="number">-1</span>,j<span class="number">-2</span>v]+w,.., f[i<span class="number">-1</span>,j-sv]+(s<span class="number">-1</span>)w, f[i<span class="number">-1</span>,j-(s+<span class="number">1</span>)v]+sw )</span><br><span class="line"><span class="comment">// 受个数限制，永远最后多一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多重背包的正确优化（二进制拆分法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[<span class="number">12010</span>], w[<span class="number">12010</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="type">int</span> a, b, s;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt;= s) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">v[cnt] = a * k;</span><br><span class="line">w[cnt] = b * k;</span><br><span class="line">s -= k;</span><br><span class="line">k *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">v[cnt] = a * s;</span><br><span class="line">w[cnt] = b * s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n = cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= v[i];j--) &#123;</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">110</span>], v[<span class="number">110</span>][<span class="number">110</span>], w[<span class="number">110</span>][<span class="number">110</span>], s[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">cin &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= s[i];j++) &#123;</span><br><span class="line">cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= <span class="number">0</span>;j--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= s[i];k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][k] &lt;= j) &#123;</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;动态规划——背包问题&quot;&gt;&lt;a href=&quot;#动态规划——背包问题&quot; class=&quot;headerlink&quot; title=&quot;动态规划——背包问题&quot;&gt;&lt;/a&gt;动态规划——背包问题&lt;/h2&gt;&lt;h3 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class=&quot;headerlink&quot; title=&quot;01背包&quot;&gt;&lt;/a&gt;01背包&lt;/h3&gt;&lt;p&gt;物品数量有限，要么选择该物品，要么不选这个物品&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;朴素做法（开二维空间）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="背包问题" scheme="https://code-devotee.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>分治与排序</title>
    <link href="https://code-devotee.github.io/2022/03/23/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <id>https://code-devotee.github.io/2022/03/23/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-04-20T08:09:46.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分治与排序"><a href="#分治与排序" class="headerlink" title="分治与排序"></a>分治与排序</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h4><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> key = arr[(left + right) / <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> l = left;</span><br><span class="line">    <span class="type">int</span> r = right;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[l] &lt; key)</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">while</span>(arr[r] &gt; key)</span><br><span class="line">            r--;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[l],arr[r]);</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(left,r);</span><br><span class="line">    <span class="built_in">quick_sort</span>(l,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、归并排序"><a href="#二、归并排序" class="headerlink" title="二、归并排序"></a>二、归并排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> b, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == e)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (b + e) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = b, j = mid + <span class="number">1</span>, k = b;</span><br><span class="line">    <span class="built_in">msort</span>(b, mid);</span><br><span class="line">    <span class="built_in">msort</span>(mid + <span class="number">1</span>, e);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] &lt;= arr1[j])</span><br><span class="line">            arr2[k++] = arr1[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            arr2[k++] = arr1[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)</span><br><span class="line">        arr2[k++] = arr1[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= e)</span><br><span class="line">        arr2[k++] = arr1[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = b;l &lt;= e;l++)</span><br><span class="line">        arr1[l] = arr2[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用：</p><ul><li>逆序对，例：洛谷p1908</li><li>将一串无序的数字，交换相邻的两个元素，用最少的交换次数使原序列变成不下降序列，实质也是求逆序对</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分治与排序&quot;&gt;&lt;a href=&quot;#分治与排序&quot; class=&quot;headerlink&quot; title=&quot;分治与排序&quot;&gt;&lt;/a&gt;分治与排序&lt;/h2&gt;&lt;h3 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h3&gt;&lt;h4 id=&quot;一、快速排序&quot;&gt;&lt;a href=&quot;#一、快速排序&quot; class=&quot;headerlink&quot; title=&quot;一、快速排序&quot;&gt;&lt;/a&gt;一、快速排序&lt;/h4&gt;</summary>
    
    
    
    <category term="算法" scheme="https://code-devotee.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="分治与排序" scheme="https://code-devotee.github.io/tags/%E5%88%86%E6%B2%BB%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
