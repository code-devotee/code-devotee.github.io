<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-17T15:46:45.201Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intellij idea 快捷键</title>
    <link href="http://example.com/2022/03/23/Intellij%20idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2022/03/23/Intellij%20idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-17T15:46:45.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intellij-idea-快捷键"><a href="#Intellij-idea-快捷键" class="headerlink" title="Intellij idea 快捷键"></a>Intellij idea 快捷键</h1><span id="more"></span><ul><li><p>调用构造方法、setter方法等   ：    <strong>Alt + Ins</strong></p></li><li><p>调用 main 方法：<strong>main + 回车          或            pvsm + 回车</strong></p></li><li><p>注释的快捷键：<strong>CTRL + SHIFT + /</strong></p></li><li><p>将多行代码进行改变位置</p><p>1。代码 右 移 ：Tab键<br>选中多行代码，按Tab</p><p>2。代码 左 移 ：Shift+Tab键<br>选中多行代码，按Shift+Tab键</p><p>3。代码 上 移 ：Shift+Alt +方向上键<br>选中多行代码，按Shift+Alt+方向上键 ↑</p><p>4。代码 下 移 ：Shift+Alt +方向下键<br>选中多行代码，按Shift+Alt+方向下键↓</p></li><li><p>导包：Alt + enter</p></li><li><p>换行：shift + enter</p></li></ul><h1 id="eclipse-快捷键"><a href="#eclipse-快捷键" class="headerlink" title="eclipse 快捷键"></a>eclipse 快捷键</h1><ul><li><p>创建 setter、getter、构造函数等：<strong>SHIFT + ALT + S</strong></p></li><li><p>格式化：<strong>ctrl + shift + f</strong></p></li><li><p>关闭Window： Ctrl+W</p></li><li><p>删除行： <strong>Ctrl+D</strong></p></li><li><p>上下移动代码行： <strong>Alt+↑,↓</strong></p></li><li><p>Debug单步StepOver：F6</p><p>Debug进入方法StepInto： F5</p><p>Debug步出方法StepReturn/StepOut： F7</p><p>Debug继续到下一断点Resume： F8</p><p>Debug查看语句执行结果： 选中后Ctrl+Shift+I</p></li><li><p>添加类的 import 导入：ctrl + shift + m</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Intellij-idea-快捷键&quot;&gt;&lt;a href=&quot;#Intellij-idea-快捷键&quot; class=&quot;headerlink&quot; title=&quot;Intellij idea 快捷键&quot;&gt;&lt;/a&gt;Intellij idea 快捷键&lt;/h1&gt;</summary>
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>I/o 流</title>
    <link href="http://example.com/2022/03/23/Io%20%E6%B5%81/"/>
    <id>http://example.com/2022/03/23/Io%20%E6%B5%81/</id>
    <published>2022-03-23T07:13:47.000Z</published>
    <updated>2022-02-17T16:32:55.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-o-流"><a href="#I-o-流" class="headerlink" title="I/o 流"></a>I/o 流</h1><p>java语言定义了许多专门负责输入输出的流，这些类都放在java.io包中。其中，所有输入流类都是抽象类InputStream（字节输入流）或Reader（字符输入流）的子类；而所有输出流都是抽象类OutputStream（字节输出流）或抽象类Writer（字符输出流）的子类。</p><span id="more"></span><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><p>InputStream类是字节输入流的抽象类，是所有字节输入流的父类。</p><p>下面是一些常用的方法；</p><ul><li>read()方法：从输入流中读取下一个字节，如果已经读到流末尾而没有可用的字节，则返回值为-1；</li><li>read(byte[] b): 从输入流中读入一定长度的字节，并以整数的形式返回字节数。</li><li>reset()方法:将输入指针返回到当前所做的标记处。</li><li>skip(long n)：跳过输入流上的n个字节并返回实际跳过的字节数</li><li>close()方法：关闭此输入流并释放与该流相关的所有系统资源</li></ul><p>Reader类是字符输入流的抽像类，Reader类中的方法与InputStream中的方法类似</p><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><p> OutputStream类中的所有方法均返回void，下面对OutputStream的方法做简单介绍</p><ul><li>write(int b)：将指定的字节写入此输出流</li><li>write(byte[] b)方法：将b个字节从指定的byte数组写入此输出流</li><li>write(byte[],int offf,int len)：将指定byte数组中从偏移量off开始的len个字节写入此输出流</li><li>flush()方法：彻底完成输出并清空缓存区</li><li>close()方法：关闭输出流</li></ul><p>writer类是字符输出流的抽象类</p><h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><p>文件的创建和删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>File 类的常用的方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>exits()</td><td>判断文件是否存在</td></tr><tr><td>length()</td><td>获取文件的长度（以字节为单位）</td></tr><tr><td>getAbsolutePath()</td><td>获取文件的绝对路径</td></tr><tr><td>getPath()</td><td>获取相对路径</td></tr><tr><td>isFile()</td><td>判断是否是文件</td></tr><tr><td>isDirectory()</td><td>判断是否是一个文件夹</td></tr><tr><td>delete()</td><td>当前文件删除是否成功</td></tr><tr><td>createNewFile()</td><td>创建文件是否成功</td></tr></tbody></table><h3 id="FileInputStream类和-FileOutputStream-类"><a href="#FileInputStream类和-FileOutputStream-类" class="headerlink" title="FileInputStream类和 FileOutputStream 类"></a>FileInputStream类和 FileOutputStream 类</h3><h4 id="FileInputStream-类"><a href="#FileInputStream-类" class="headerlink" title="FileInputStream 类"></a>FileInputStream 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO3</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  字节流：文件字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   -InputStream是所有字节输入流的顶层父类，是一个抽象类。如果要用，需要使用子类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件&quot;</span>+file.createNewFile());</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="comment">/*每次读取一个字节</span></span><br><span class="line"><span class="comment">System.out.println(is.read());*/</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="comment">//int read​()： 从文件中读取一个字节数的数据。并返回读取到的这个字节。 如果读取结束，返回的是-1.</span></span><br><span class="line"><span class="keyword">while</span>((data = is.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println((<span class="type">char</span>)data);</span><br><span class="line"><span class="comment">//System.out.println(data);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//每次读取个数</span></span><br><span class="line">            <span class="type">byte</span>[] datas = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = is.read(datas))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="keyword">new</span> <span class="title class_">String</span>(datas,<span class="number">0</span>,data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以把上面的例子改成下面这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO5</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;A.txt&quot;</span>);</span><br><span class="line"><span class="comment">//InputStream is = new FileInputStream(&quot;A.txt&quot;);</span></span><br><span class="line">System.out.println(is.available());</span><br><span class="line"><span class="type">byte</span> []datas = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">if</span>((data = is.read(datas))!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(datas,<span class="number">0</span>,data));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//为什么要先判断是否为null,因为不判断 如果真的为空 就报异常</span></span><br><span class="line"><span class="keyword">if</span>(is!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FileOutputStream-类"><a href="#FileOutputStream-类" class="headerlink" title="FileOutputStream 类"></a>FileOutputStream 类</h4><p>注意：在关闭流之前，应该先flush() 清空缓存区。因为数据是先被读到内存中，然后用数据写入到文件中，当你数据读完的时候，并不代表你的数据已经写完了，因为还有一部分可能会留在内存缓存区中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO6</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写文件，OutputSream  子类  FileOutputStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//用FileOutputStream有参构造方法读取当前文件目录的c.txt文件</span></span><br><span class="line"><span class="comment">//如果这个文件不存在，那么就创建一个</span></span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;B.txt&quot;</span>);</span><br><span class="line">os.write(<span class="number">65</span>);</span><br><span class="line">os.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO7</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D.txt&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;没有一幅图解决不了的不理解&quot;</span>;</span><br><span class="line"><span class="comment">//String类给我们提供的有用于转换为byte数组的方法</span></span><br><span class="line"><span class="type">byte</span>[] bytes = message.getBytes();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(os!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileReader-和-FileWriter-类"><a href="#FileReader-和-FileWriter-类" class="headerlink" title="FileReader 和 FileWriter 类"></a>FileReader 和 FileWriter 类</h2><p>使用FileOutputStream向文件中写入数据与使用FileInputStream 像文件中读取数据时，都是按照字节或字节数组的读取方法读取，如果读取不好，可能会出现乱码的现象，此时采用字符流Reader 或 Writer 类可避免这种现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO8</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//字符流  Reader  抽象类--&gt;InputStreamReader --&gt;FileReader</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">while</span>((data = reader.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="type">char</span>)data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"><span class="type">int</span> readcount;</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>((readcount=reader.read())!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,readcount));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带缓存的输入输出流"><a href="#带缓存的输入输出流" class="headerlink" title="带缓存的输入输出流"></a>带缓存的输入输出流</h3><p>缓存是I/O的一种性能优化。缓存流为I/O流增加了内存缓存区。有了缓存区，使得在流上执行skip(),mark(),reset()方法都成为可能。</p><h4 id="BufferedInputStream-与-BufferedOutputStream-类"><a href="#BufferedInputStream-与-BufferedOutputStream-类" class="headerlink" title="BufferedInputStream 与 BufferedOutputStream 类"></a>BufferedInputStream 与 BufferedOutputStream 类</h4><p>BufferedInputStream 类可以对所有 InputStream 类进行带缓存区的包装以达到性能的优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO10</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//字符缓冲区流   有独有的方法  一次读取一行</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//读取一行  返回是字符串  对字符串进行非null判断</span></span><br><span class="line"><span class="comment">//循环读取</span></span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedReader-与-BufferedWriter-类"><a href="#BufferedReader-与-BufferedWriter-类" class="headerlink" title="BufferedReader 与 BufferedWriter 类"></a>BufferedReader 与 BufferedWriter 类</h4><p>BufferedReader 类与BufferedWriter 类分别继承自Reader 类和Writer类。这两个类同样具有内部缓存区，都是以行为单位进行输入/输出。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>read()</td><td>读取单个字符</td></tr><tr><td>readLine()</td><td>读取一个文本行，并将其返回字符串。若无数据可读，则返回null</td></tr><tr><td>Write(String s,int off,int len)</td><td>写入字符串的某一部分</td></tr><tr><td>flush()</td><td>刷新该流的缓存</td></tr><tr><td>newLine()</td><td>写入一个行分隔符</td></tr></tbody></table><p>在使用BufferedWriter 类的Writer()方法时，数据并没有立刻被写入输出流，而是首先进入缓存区，如果想立刻将缓存区中的数据写入输出流，一定要调用flush()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO10</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//字符缓冲区流   有独有的方法  一次读取一行</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D.txt&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//读取一行  返回是字符串  对字符串进行非null判断</span></span><br><span class="line"><span class="comment">//循环读取</span></span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;I-o-流&quot;&gt;&lt;a href=&quot;#I-o-流&quot; class=&quot;headerlink&quot; title=&quot;I/o 流&quot;&gt;&lt;/a&gt;I/o 流&lt;/h1&gt;&lt;p&gt;java语言定义了许多专门负责输入输出的流，这些类都放在java.io包中。其中，所有输入流类都是抽象类InputStream（字节输入流）或Reader（字符输入流）的子类；而所有输出流都是抽象类OutputStream（字节输出流）或抽象类Writer（字符输出流）的子类。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://example.com/2022/02/18/hello-world/"/>
    <id>http://example.com/2022/02/18/hello-world/</id>
    <published>2022-02-17T16:56:06.665Z</published>
    <updated>2022-02-17T16:56:06.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
</feed>
